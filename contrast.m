function [avg_thresh] = contrast(initials, scale_factor, frame_rate, linearize, Trials, out_contrast, start)ListenChar(2);HideCursor;try    %----------Universal Variables----------    tme = clock;    frame_rate                      = 120;       % screen frame rate (hz)    ITI                             = 500;        % ms    ref_contrast_start              = [20*(0.5+rand/2) 20*(0.5+rand/2)];    background                      = 126;      % background intensity, in gray scale units    %----------Outer Grating----------    out_stimulus_radius             = 400;      % in arcmin    %----------Inner Grating----------    in_stimulus_radius              = 100;      % in arcmin    in_contrast                    	= 20;    buffer                          = 0;        % Gap between inner and outer gratings (arcmin)    H_ecc_fix = 0;    V_ecc_fix = 0;    %---------Staircase stuff----------    steps                               = [.14 .06 .025];  % increment values, in log percent    step_pos                            = [1 1];        % what step are we using? incremented after 2 flips    flips                               = [0 0];        % number of flips.    flipped                             = 0;        %was the last trial a flip?    proceed                             = [1 1];    trial                               = 1;    cond_count                          = [1 1];    % housekeeping stuff    out_stimulus_radius  = round(out_stimulus_radius /scale_factor);    in_stimulus_radius  = round(in_stimulus_radius /scale_factor);            OpenScreensCalib;    load small_noise             %1kx1k filtered noise array    source = test4;    % make the inner spatial envelope    [in_x,in_y]=meshgrid(-out_stimulus_radius:out_stimulus_radius,-out_stimulus_radius:out_stimulus_radius);    in_bps = (out_stimulus_radius)*2+1;    in_circle=((in_stimulus_radius)^2-(in_x.^2+in_y.^2));    for i=1:in_bps; for j =1:in_bps; if in_circle(i,j) < 0; in_circle(i,j) = 0; else in_circle(i,j) = 1; end; end;    end;    % make buffer spatial envelope    [buf_x,buf_y]=meshgrid(-(out_stimulus_radius):out_stimulus_radius,-(out_stimulus_radius):out_stimulus_radius);    buf_bps = (out_stimulus_radius)*2+1;    buf_circle=((in_stimulus_radius+buffer)^2-(buf_x.^2+buf_y.^2));    for i=1:buf_bps; for j =1:buf_bps; if buf_circle(i,j) < 0; buf_circle(i,j) = 0; else buf_circle(i,j) = 1; end; end;    end;    % make the outter spatial envelope    [out_x,out_y]=meshgrid(-out_stimulus_radius:out_stimulus_radius,-out_stimulus_radius:out_stimulus_radius);    out_bps = (out_stimulus_radius)*2+1;    out_circle=((out_stimulus_radius)^2-(out_x.^2+out_y.^2));    for i=1:out_bps; for j =1:out_bps; if out_circle(i,j) < 0; out_circle(i,j) = 0; else out_circle(i,j) = 1; end; end;    end;    out_circle = out_circle-buf_circle;    %  create stimulus rectangles    movie_rect= [0,0,out_bps,out_bps];    target_rect = [0,0,out_bps,out_bps];    ref_rect = [0,0,in_bps,in_bps];    scr_left_middle = fix(screen_rect(3)/2)-round(out_bps/2);    scr_top = fix(screen_rect(4)/2)-round(out_bps/2);    screen_rect_middle = movie_rect + [scr_left_middle, scr_top, scr_left_middle, scr_top];    screen_patch = screen_rect_middle;    pos_hor(1) = 2*sr_hor/3-sr_hor/8;    pos_hor(2) = 4*sr_hor/3+sr_hor/8;    pos_ver(1) = sr_ver;    pos_ver(2) = sr_ver;    out_amplitude = background*out_contrast/100;    in_amplitude = background*in_contrast/100;    % make the target surround     x_start = ceil(rand*(size(source,2)-out_bps));    y_start = ceil(rand*(size(source,1)-out_bps));    still_noise = source(x_start:x_start+out_bps-1,y_start:y_start+out_bps-1);    still_noise1 = still_noise.*out_circle.*(out_amplitude/max(max(still_noise)));    % make the target center    x_start = ceil(rand*(size(source,2)-in_bps));    y_start = ceil(rand*(size(source,1)-in_bps));    still_noise = source(x_start:x_start+in_bps-1,y_start:y_start+in_bps-1);    still_noise2 = still_noise.*in_circle.*(in_amplitude/max(max(still_noise)));    still_noise = still_noise1+still_noise2+background;    movie1 = Screen('MakeTexture',w,still_noise);    %----------randomize trial order----------    perm = randperm(1000);    perm = mod(perm,2)+1;    staircase1(1) = ref_contrast_start(1);    staircase2(1) = ref_contrast_start(2);        target_pos = [pos_hor(1)-floor(out_bps/2),pos_ver(1)-floor(out_bps/2),pos_hor(1)+floor(out_bps/2),pos_ver(1)+floor(out_bps/2)];    ref_pos = [pos_hor(2)-floor(in_bps/2),pos_ver(2)-floor(in_bps/2),pos_hor(2)+floor(in_bps/2),pos_ver(2)+floor(in_bps/2)];    Screen(w,'DrawLine',[250 0 0],sr_hor-2+H_ecc_fix,sr_ver+V_ecc_fix,sr_hor+2+H_ecc_fix,sr_ver+V_ecc_fix,2);    Screen(w,'DrawLine',[250 0 0],sr_hor+H_ecc_fix,sr_ver-2+V_ecc_fix,sr_hor+H_ecc_fix,sr_ver+2+V_ecc_fix,2);        %instructions    Screen('DrawText', w, 'Task: Which center circle is higher in contrast: LEFT or RIGHT?',sr_hor-3*sr_hor/4,40,[255 0 0]);    Screen('DrawText', w, 'Answer by pressing either the LEFT or the RIGHT arrow key',sr_hor-3*sr_hor/4,100,0);    Screen('DrawText', w, '(Press the UP arrow to begin)',sr_hor-3*sr_hor/4,150,0);    Screen('DrawText', w, '**** Do not rush **** Guess if unsure ****',sr_hor-3*sr_hor/4,200,[255 0 0]);    if Trials<25        Screen('DrawText', w, '*** PRACTICE ***',sr_hor-3*sr_hor/4+100,screen_rect(4)-100,[255 0 0]);    end    %set new contrast    ref_amplitude = background*ref_contrast_start(1)/100;    still_noise = source(x_start:x_start+in_bps-1,y_start:y_start+in_bps-1);    still_noise = still_noise.*in_circle.*(ref_amplitude/max(max(still_noise)))+background;    movie3 = Screen('MakeTexture',w,still_noise);    Screen('DrawTexture', w, movie3, ref_rect, ref_pos+[0 150 0 150]);    Screen('DrawTexture', w, movie1, target_rect, target_pos+[0 150 0 150]);    Screen('Flip',w);    FlushEvents('keyDown');    validKey = 0;    while ~validKey        [keyIsDown,timeSecs,keyCode] = KbCheck;        if keyIsDown;            if keyCode(82)                validKey = 1;            end;        end;    end    Screen('FillRect',w, background);    Screen('Flip', w);           % MAIN LOOP    while mean(proceed)>0 && (trial < Trials)        if perm(trial)==1            if proceed(1)                ref_contrast = staircase1(cond_count(1));                condition = 1;                cond_count(condition) = cond_count(condition)+1;            else                ref_contrast = staircase2(cond_count(2));                condition = 2;                cond_count(condition) = cond_count(condition)+1;            end        else            if proceed(2)                ref_contrast = staircase2(cond_count(2));                condition = 2;                cond_count(condition) = cond_count(condition)+1;            else                ref_contrast = staircase1(cond_count(1));                condition = 1;                cond_count(condition) = cond_count(condition)+1;            end        end        %end staircase boilerplate                if condition==1            target_pos = [pos_hor(1)-floor(out_bps/2),pos_ver(1)-floor(out_bps/2),pos_hor(1)+floor(out_bps/2),pos_ver(1)+floor(out_bps/2)];            ref_pos = [pos_hor(2)-floor(in_bps/2),pos_ver(2)-floor(in_bps/2),pos_hor(2)+floor(in_bps/2),pos_ver(2)+floor(in_bps/2)];            %ref_right = 1;        else            target_pos = [pos_hor(2)-floor(out_bps/2),pos_ver(2)-floor(out_bps/2),pos_hor(2)+floor(out_bps/2),pos_ver(2)+floor(out_bps/2)];            ref_pos = [pos_hor(1)-floor(in_bps/2),pos_ver(1)-floor(in_bps/2),pos_hor(1)+floor(in_bps/2),pos_ver(1)+floor(in_bps/2)];            %ref_right = 0;        end        % draw the white fixation cross        %         Screen(w,'DrawLine',255,pos_hor(1)-2,pos_ver(1),pos_hor(1)+2,pos_ver(1),2);        %         Screen(w,'DrawLine',255,pos_hor(1),pos_ver(1)-2,pos_hor(1),pos_ver(1)+2,2);        %         Screen(w,'DrawLine',255,pos_hor(2)-2,pos_ver(2),pos_hor(2)+2,pos_ver(2),2);        %         Screen(w,'DrawLine',255,pos_hor(2),pos_ver(2)-2,pos_hor(2),pos_ver(2)+2,2);        % Screen(w,'DrawLine',[250 0 0],sr_hor-2+H_ecc_fix,sr_ver+V_ecc_fix,sr_hor+2+H_ecc_fix,sr_ver+V_ecc_fix,2);      %  Screen(w,'DrawLine',[250 0 0],sr_hor+H_ecc_fix,sr_ver-2+V_ecc_fix,sr_hor+H_ecc_fix,sr_ver+2+V_ecc_fix,2);        Screen('Flip',w);        priorityLevel=MaxPriority(w);        Priority(priorityLevel);        %set new contrast        ref_amplitude = background*ref_contrast/100;                % make the target surround        x_start = ceil(rand*(size(source,2)-out_bps));        y_start = ceil(rand*(size(source,1)-out_bps));        still_noise = source(x_start:x_start+out_bps-1,y_start:y_start+out_bps-1);        if rand>.5            still_noise = fliplr(still_noise);        end        if rand>.5            still_noise = flipud(still_noise);        end        still_noise1 = still_noise.*out_circle.*(out_amplitude/max(max(still_noise)));        % make the target center        x_start = ceil(rand*(size(source,2)-in_bps));        y_start = ceil(rand*(size(source,1)-in_bps));        still_noise = source(x_start:x_start+in_bps-1,y_start:y_start+in_bps-1);        if rand>.5            still_noise = fliplr(still_noise);        end        if rand>.5            still_noise = flipud(still_noise);        end        still_noise2 = still_noise.*in_circle.*(in_amplitude/max(max(still_noise)));        still_noiseF = still_noise1+still_noise2+background;        movie1 = Screen('MakeTexture',w,still_noiseF);                still_noiseT = still_noise.*in_circle.*(ref_amplitude/max(max(still_noise)))+background;        movie3 = Screen('MakeTexture',w,still_noiseT);                Screen('DrawTexture', w, movie3, ref_rect, ref_pos);        Screen('DrawTexture', w, movie1, target_rect, target_pos);        %           Screen(w,'DrawLine',[250 0 0],sr_hor-2+H_ecc_fix,sr_ver+V_ecc_fix,sr_hor+2+H_ecc_fix,sr_ver+V_ecc_fix,2);        %   Screen(w,'DrawLine',[250 0 0],sr_hor+H_ecc_fix,sr_ver-2+V_ecc_fix,sr_hor+H_ecc_fix,sr_ver+2+V_ecc_fix,2);        Screen('Flip',w);        % gets the answer        FlushEvents('keyDown');        validKey = 0;        while ~validKey            [keyIsDown,timeSecs,keyCode] = KbCheck;            if keyIsDown;                if keyCode(80)                    validKey = 1;                    resp = 1;                elseif keyCode(79)                    validKey = 1;                    resp = 2;                end;            end;        end        Screen('FillRect',w, background);        Screen('Flip', w);        Priority(0);        WaitSecs(ITI/1000);        %staircase code        % was this trial a flip?-----        if cond_count(condition)>2            if last_resp(condition) ~= resp                flipped = 1;            else                flipped = 0;            end        end        % what are you gonna do about it?-----        if flipped            flips(condition) = flips(condition)+1;            if condition==1                flips1(flips(1)) = staircase1(cond_count(1)-1);            else                flips2(flips(2)) = staircase2(cond_count(2)-1);            end            if step_pos(condition)==length(steps);                if flips(condition) == 2*(length(steps)+1);                    proceed(condition) = 0;                end            else                step_pos(condition) = floor(flips(condition)/2)+1;            end        end        % update the values--sometimes split based on presentation side/tilt variable        if condition==1            if resp == 1                staircase1(cond_count(1)) = 10^(log10(staircase1(cond_count(1)-1))+steps(step_pos(condition)));            else                staircase1(cond_count(1)) = 10^(log10(staircase1(cond_count(1)-1))-steps(step_pos(condition)));            end        else            if resp == 1                staircase2(cond_count(2)) = 10^(log10(staircase2(cond_count(2)-1))-steps(step_pos(condition)));            else                staircase2(cond_count(2)) = 10^(log10(staircase2(cond_count(2)-1))+steps(step_pos(condition)));            end        end        last_resp(condition) = resp;        trial = trial+1;    end    if Trials>999        thresh1 = mean(flips1(flips(1)-3:flips(1)));        thresh2 = mean(flips2(flips(2)-3:flips(2)));        avg_thresh = (thresh1+thresh2)/2;        fid = fopen(strcat(initials,'_',int2str(tme(2)),'_',int2str(tme(3))),'a');        fprintf(fid,'--------------------------------------------------\n');        fprintf(fid,'%s\t%02.0f/%02.0f/%4.0f\t%02.0f:%02.0f\n',initials,tme(2),tme(3),tme(1),tme(4),tme(5));        fprintf(fid,'Surround Contrast Illusion\n');        fprintf(fid,' --> Stair 1 Mean = %5.2f%%\n',thresh1);        fprintf(fid,' --> Stair 2 Mean = %5.2f%%\n',thresh2);        fprintf(fid,' --> Contrast reduction = %5.1f%%\n',100*(in_contrast-mean([thresh2 thresh1]))/in_contrast);        fprintf(fid,'--------------------------------------------------\n\n');        fclose(fid);        fprintf('--------------------------------------------------\n');        fprintf('%s\t%02.0f/%02.0f/%4.0f\t%02.0f:%02.0f\n',initials,tme(2),tme(3),tme(1),tme(4),tme(5));        fprintf('Contrast Surround\n');        fprintf(' --> Stair 1 Mean = %5.2f%%\n',thresh1);        fprintf(' --> Stair 2 Mean = %5.2f%%\n',thresh2);        fprintf(' --> Contrast reduction = %5.1f%%\n',100*(in_contrast-mean([thresh2 thresh1]))/in_contrast);        fprintf('--------------------------------------------------\n\n');    else        avg_thresh = start;    end    Screen('CloseAll');    Screen('Preference', 'VisualDebugLevel', oldVisualDebugLevel);    Screen('Preference', 'SuppressAllWarnings', oldSupressAllWarnings);    ListenChar(1);    ShowCursor;catch    s = lasterror;    ddd = psychlasterror;    msg = ddd.message    ListenChar(1);    ShowCursor;    ddd = lasterror;    ddd.message    ddd.stack(1,1).line    psychrethrow(lasterror);    Screen('CloseAll');    Screen('Preference', 'VisualDebugLevel', oldVisualDebugLevel);    Screen('Preference', 'SuppressAllWarnings', oldSupressAllWarnings);    Priority(0);    psychrethrow(psychlasterror);end %try..catch..